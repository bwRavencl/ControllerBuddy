import org.gradle.nativeplatform.platform.internal.Architectures
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.gradle.plugins.ide.eclipse.model.Container
import org.gradle.plugins.ide.eclipse.model.SourceFolder

import com.github.spotbugs.snom.SpotBugsReport
import com.github.spotbugs.snom.SpotBugsTask

plugins {
	id 'application'
	id 'com.github.spotbugs' version '5.0.13'
	id 'com.diffplug.spotless' version '6.12.0'
	id 'com.github.ben-manes.versions' version '0.44.0'
	id 'org.gradlex.extra-java-module-info' version '1.1'
	id 'eclipse'
	id 'org.ajoberstar.grgit' version '5.0.0'
}

version = org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')

sourceCompatibility = 19
targetCompatibility = 19

archivesBaseName = applicationName.toLowerCase()

application {
	mainModule = 'de.bwravencl.controllerbuddy'
	mainClass = 'de.bwravencl.controllerbuddy.gui.Main'
}

ext {
	os = DefaultNativePlatform.currentOperatingSystem

	versionWithoutHash = version.substring(0, version.indexOf('-'))

	moduleInfoFile = 'src/main/java/module-info.java'
	versionFile = 'src/main/java/de/bwravencl/controllerbuddy/version/Version.java'

	resourcesDir = 'src/main/resources'
	libsDir = "$buildDir/$libsDirName"
	tmpDir = "$buildDir/tmp"
	runtimeDir = "$tmpDir/runtime"

	linuxAddOpensValue = "java.desktop/sun.awt.X11=${project.application.mainModule.get()}"
	linuxJvmArgs = [
		"--add-opens=$linuxAddOpensValue"
	]

	gamecontrollerdbFile = "$resourcesDir/gamecontrollerdb.txt"
	jdtUiPrefsFile = '.settings/org.eclipse.jdt.ui.prefs'

	spotbugsPrefsFile = '.settings/edu.umd.cs.findbugs.core.prefs'
	spotbugsBaselineFile = 'spotbugs-baseline.xml'
	spotbugsEffort = 'max'
	spotbugsMaxRank = '20'
	spotbugsReportLevel = 'Low'

	spotlessFormatFile = 'spotless.eclipseformat.xml'
	spotlessImportOrderFile = 'spotless.importorder'

	arch = DefaultNativePlatform.currentArchitecture
	distAppendix = "${os.toFamilyName()}-$arch.name"

	batikVersion = '1.16'
	commonsCliVersion = '1.5.0'
	jxinputVersion = '1.0.0'
	purejavahidapiVersion = 'ef5679619d'

	openVrSupport = false
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

task cleanModuleInfo {
	description = "Removes the \'$moduleInfoFile\' source file"
	doLast { delete moduleInfoFile }
}

task cleanVersion {
	description = "Removes the \'$versionFile\' source file"
	doLast { delete versionFile }
}

task cleanGameControllerDB {
	description = "Removes the \'gamecontrollerdb.txt\' file from the \'$resourcesDir\' directory."
	doLast { delete gamecontrollerdbFile }
}

clean.dependsOn cleanModuleInfo, cleanVersion, cleanGameControllerDB

dependencies {
	def jnaVersion = '5.12.1'
	def lwjglVersion = '3.3.1'

	def xinputSupport = false;
	def lwjglOs
	if (os.windows) {
		lwjglOs = "windows"
		openVrSupport = true
		xinputSupport = true;
	} else if (os.macOsX)
		lwjglOs = 'macos'
	else if (os.linux) {
		lwjglOs = 'linux'
		openVrSupport = true
	} else
		throw new GradleException("Unsupported operating system $os.displayName")

	def lwjglArch
	switch (arch.name) {
		case { Architectures.X86.isAlias(it) && os.windows }:
			lwjglArch = 'x86'
			break
		case { Architectures.X86_64.isAlias(it) }:
			lwjglArch = ''
			break
		case { Architectures.ARM_V7.isAlias(it) && os.linux }:
			lwjglArch = 'arm32'
			openVrSupport = false
			break
		case { Architectures.AARCH64.isAlias(it) }:
			lwjglArch = 'arm64'
			openVrSupport = false
			break
		default:
			throw new GradleException("Unsupported system architecture $arch.displayName")
	}

	def lwjglPlatform = "${lwjglOs}${lwjglArch.isEmpty() ? '' : '-'}${lwjglArch}"

	implementation "commons-cli:commons-cli:$commonsCliVersion",
			'com.formdev:flatlaf:3.0',
			"com.github.strikerx3:jxinput:$jxinputVersion",
			'com.google.code.gson:gson:2.10',
			'io.github.classgraph:classgraph:4.8.152',
			"net.java.dev.jna:jna-jpms:$jnaVersion",
			"net.java.dev.jna:jna-platform-jpms:$jnaVersion",
			"org.lwjgl:lwjgl:$lwjglVersion",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion",
			"org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-$lwjglPlatform",
			"org.lwjgl:lwjgl-opengl:$lwjglVersion",
			"org.lwjgl:lwjgl-openvr:$lwjglVersion",
			"org.lwjgl:lwjgl:$lwjglVersion:natives-$lwjglPlatform"

	implementation("com.github.nyholku:purejavahidapi:$purejavahidapiVersion") {
		exclude module: 'jna'
		exclude module: 'jna-platform'
	}

	implementation('uk.co.bithatch:linuxio4j:2.1') {
		exclude module: 'jna'
		exclude module: 'jna-platform'
	}

	implementation("org.apache.xmlgraphics:batik-swing:$batikVersion") {
		exclude group: 'xml-apis', module: 'xml-apis'
	}

	if (openVrSupport)
		implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-$lwjglPlatform",
				"org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-$lwjglPlatform"
}

dependencyUpdates {
	revision = 'release'
	rejectVersionIf {
		it.candidate.module in ['purejavahidapi']
	}
}

extraJavaModuleInfo {
	failOnMissingModuleInfo = false

	automaticModule("batik-anim-${batikVersion}.jar", 'batik.anim')
	automaticModule("batik-awt-util-${batikVersion}.jar", 'batik.awt.util')
	automaticModule("batik-bridge-${batikVersion}.jar", 'batik.bridge')
	automaticModule("batik-constants-${batikVersion}.jar", 'batik.constants')
	automaticModule("batik-css-${batikVersion}.jar", 'batik.css')
	automaticModule("batik-dom-${batikVersion}.jar", 'batik.dom')
	automaticModule("batik-ext-${batikVersion}.jar", 'batik.ext')
	automaticModule("batik-gui-util-${batikVersion}.jar", 'batik.gui.util')
	automaticModule("batik-gvt-${batikVersion}.jar", 'batik.gvt')
	automaticModule("batik-i18n-${batikVersion}.jar", 'batik.i18n')
	automaticModule("batik-script-${batikVersion}.jar", 'batik.script')
	automaticModule("batik-shared-resources-${batikVersion}.jar", 'batik.shared.resources')
	automaticModule("batik-svg-dom-${batikVersion}.jar", 'batik.svg.dom')
	automaticModule("batik-util-${batikVersion}.jar", 'batik.util')
	automaticModule("batik-parser-${batikVersion}.jar", 'batik.parser')
	automaticModule("batik-xml-${batikVersion}.jar", 'batik.xml')
	automaticModule('commons-io-1.3.1.jar', 'commons.io')
	automaticModule('commons-logging-1.0.4.jar', 'commons.logging')
	automaticModule("jxinput-${jxinputVersion}.jar", 'jxinput')
	automaticModule("purejavahidapi-${purejavahidapiVersion}.jar", 'purejavahidapi')
	automaticModule('xmlgraphics-commons-2.7.jar', 'xml.graphics.commons')
	automaticModule('xml-apis-ext-1.3.04.jar', 'xml.apis.ext')

	module("batik-swing-${batikVersion}.jar", 'batik.swing', batikVersion) {
		exports('org.apache.batik.swing')
		requiresTransitive('java.desktop')
		requiresTransitive('commons.io')
		requiresTransitive('commons.logging')
		requiresTransitive('batik.anim')
		requiresTransitive('batik.bridge')
		requiresTransitive('batik.constants')
		requiresTransitive('batik.css')
		requiresTransitive('batik.dom')
		requiresTransitive('batik.ext')
		requiresTransitive('batik.gvt')
		requiresTransitive('batik.script')
		requiresTransitive('batik.svg.dom')
		requiresTransitive('batik.util')
		requiresTransitive('batik.xml')
		requiresTransitive('batik.parser')
		requiresTransitive('batik.awt.util')
		requiresTransitive('batik.gui.util')
		requiresTransitive('batik.i18n')
		requiresTransitive('batik.shared.resources')
		requiresTransitive('xml.graphics.commons')
		requiresTransitive('xml.apis.ext')
	}

	module("commons-cli-${commonsCliVersion}.jar", 'commons.cli', commonsCliVersion) {
		exports('org.apache.commons.cli')
	}
}

task generateModuleInfo {
	description = "Generates the \'$moduleInfoFile\' source file"
	doLast {
		new File(moduleInfoFile).write("""\
			module de.bwravencl.controllerbuddy {

			\texports de.bwravencl.controllerbuddy.gui;

			\topens de.bwravencl.controllerbuddy.input to com.google.gson;
			\topens de.bwravencl.controllerbuddy.input.action to com.google.gson;
			\topens de.bwravencl.controllerbuddy.input.driver to com.sun.jna;

			\trequires batik.swing;
			\trequires com.google.gson;
			\trequires com.formdev.flatlaf;
			\trequires com.sun.jna;
			\trequires com.sun.jna.platform;
			\trequires commons.cli;
			\trequires io.github.classgraph;
			\trequires java.logging;
			\trequires java.prefs;
			\trequires jdk.xml.dom;
			\trequires jxinput;
			\trequires org.lwjgl;
			\trequires org.lwjgl.natives;
			\trequires org.lwjgl.glfw;
			\trequires org.lwjgl.glfw.natives;
			\trequires org.lwjgl.opengl;
			${openVrSupport ? '\trequires org.lwjgl.opengl.natives;' : ''}
			\trequires org.lwjgl.openvr;
			${openVrSupport ? '\trequires org.lwjgl.openvr.natives;' : ''}
			\trequires purejavahidapi;
			\trequires uk.co.bithatch.linuxio;
			}
			""".stripIndent())
	}
}

spotbugs {
	baselineFile = file(spotbugsBaselineFile)
	effort = spotbugsEffort
	extraArgs = ['-maxRank', spotbugsMaxRank]
	onlyAnalyze = ['de.bwravencl.-']
	reportLevel = spotbugsReportLevel
}

tasks.withType(SpotBugsTask) {
	reports({
		html { required.set(true) }
		xml { required.set(true) }
	} as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>)
}

spotless {
	encoding 'UTF-8'
	java {
		target 'src/main/java/de/bwravencl/**/*.java'
		targetExclude moduleInfoFile, versionFile
		encoding 'Cp1252'
		eclipse().configFile spotlessFormatFile
		importOrderFile spotlessImportOrderFile
		licenseHeader '''\
			/* Copyright (C) $YEAR  Matteo Hausner
			 *
			 * This program is free software: you can redistribute it and/or modify
			 * it under the terms of the GNU General Public License as published by
			 * the Free Software Foundation, either version 3 of the License, or
			 * (at your option) any later version.
			 *
			 * This program is distributed in the hope that it will be useful,
			 * but WITHOUT ANY WARRANTY; without even the implied warranty of
			 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
			 * GNU General Public License for more details.
			 *
			 * You should have received a copy of the GNU General Public License
			 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
			 */

			'''.stripIndent()
	}
	groovyGradle {
		target '*.gradle'
		greclipse().configFile(spotlessFormatFile)
	}
	format 'xml', {
		target '*.xml', 'src/main/resources/**/*.svg'
		eclipseWtp('xml')
	}
	format 'newlineAndTrailingWhitespace', {
		target '.github/**/*.yml', 'src/main/resources/**/*.properties', 'src/main/resources/**/*.svg'
		endWithNewline()
		trimTrailingWhitespace()
	}
	format 'onlyNewline', {
		target 'LICENSE', '*.gitignore', '*.importorder', '*.md', '*.txt', '*.xml', 'src/main/resources/**/*.txt'
		targetExclude gamecontrollerdbFile
		endWithNewline()
	}
}

task cleanLibsDirectory {
	description = "Removes the \'$libsDir\' directory."
	doLast { delete libsDir }
}

jar.dependsOn check, cleanLibsDirectory

task generateVersion {
	description = "Generates the \'$versionFile\' source file"
	doLast {
		new File(versionFile).write("""\
			package de.bwravencl.controllerbuddy.version;\n
			public class Version {

			\tpublic static final String VERSION = "$project.version";

			}
			""".stripIndent())
	}
}

task copyGameControllerDB(type: Copy) {
	description = "Places a copy of the \'gamecontrollerdb.txt\' file from the SDL_GameControllerDB Git Submodule folder into the \'$resourcesDir' directory."
	from 'SDL_GameControllerDB/gamecontrollerdb.txt'
	into resourcesDir
}

task cleanJdtUiPrefs {
	description = "Removes the \'$jdtUiPrefsFile\' settings file."
	doLast { delete jdtUiPrefsFile, spotbugsPrefsFile }
}

tasks.cleanEclipse.dependsOn cleanJdtUiPrefs

tasks.eclipseClasspath.dependsOn generateModuleInfo, generateVersion, copyGameControllerDB

def formatterProfile() {
	return new XmlParser().parse(file(spotlessFormatFile)).profile[0]
}

eclipse {
	classpath {
		file {
			whenMerged { cp ->
				if (os.linux)
					cp.entries.findAll {it instanceof Container && it.path ==~ /org\.eclipse\.jdt\.launching\.JRE_CONTAINER\/.*$/}.each {
						def entryAttributes = it.entryAttributes
						entryAttributes['module'] = 'true'
						entryAttributes['add-opens'] = linuxAddOpensValue
					}
			}
		}
	}
	jdt {
		file {
			withProperties { properties ->
				formatterProfile().setting.findAll { it.@id ==~ /^org\.eclipse\.jdt\.core\.formatter\..*$/ }.each { properties[it.@id] = it.@value }
			}
		}
	}
}

tasks.eclipse.doLast {
	def uiPrefs = file(jdtUiPrefsFile)
	if (uiPrefs.exists())
		logger.warn("UI preferences already exist and will not be overridden. Use task 'cleanEclipse' first.")
	else {
		def importOrder = file(spotlessImportOrderFile).readLines().findAll { it ==~ /^\d+=.*$/ }.collectEntries {
			def elements = it.split('=').toList()
			if (elements.size() < 2)
				elements << ''
			return elements
		}.sort().values().join(';')

		uiPrefs.append("""\
			eclipse.preferences.version=1
			editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
			org.eclipse.jdt.ui.ignorelowercasenames=true
			org.eclipse.jdt.ui.importorder=$importOrder
			org.eclipse.jdt.ui.ondemandthreshold=99
			org.eclipse.jdt.ui.staticondemandthreshold=99
			sp_cleanup.on_save_use_additional_actions=true
			""".stripIndent())

		def formatterProfile = formatterProfile()
		uiPrefs.append("formatter_profile=_${formatterProfile.@name}\n")
		uiPrefs.append("formatter_settings_version=${formatterProfile.@version}\n")

		def cleanupProfile = new XmlParser().parse(file('cleanup.xml')).profile[0]
		uiPrefs.append("cleanup_profile=_${cleanupProfile.@name}\n")
		uiPrefs.append("cleanup_settings_version=${cleanupProfile.@version}\n")
		cleanupProfile.setting.findAll { it.@id ==~ /^cleanup\..*$/ }.each {
			def configLine = "${it.@id}=${it.@value}\n"
			uiPrefs.append(configLine)
			uiPrefs.append("sp_$configLine")
		}
	}

	def spotbugsPrefs = file(spotbugsPrefsFile)
	if (spotbugsPrefs.exists())
		logger.warn("SpotBugs preferences already exist and will not be overridden. Use task 'cleanEclipse' first.")
	else {
		spotbugsPrefs.append("""\
			detectorExplicitSerialization=ExplicitSerialization|true
			detectorMultithreadedInstanceAccess=MultithreadedInstanceAccess|true
			detectorConfusionBetweenInheritedAndOuterMethod=ConfusionBetweenInheritedAndOuterMethod|true
			detectorWrongMapIterator=WrongMapIterator|true
			detectorUnnecessaryMath=UnnecessaryMath|true
			detectorUselessSubclassMethod=UselessSubclassMethod|false
			filter_settings=$spotbugsReportLevel|BAD_PRACTICE,CORRECTNESS,EXPERIMENTAL,I18N,MALICIOUS_CODE,MT_CORRECTNESS,PERFORMANCE,SECURITY,STYLE|false|$spotbugsMaxRank
			detectorURLProblems=URLProblems|true
			detectorIteratorIdioms=IteratorIdioms|true
			detectorMutableEnum=MutableEnum|true
			detectorFindNonShortCircuit=FindNonShortCircuit|true
			detectorSynchronizeAndNullCheckField=SynchronizeAndNullCheckField|true
			detectorVolatileUsage=VolatileUsage|true
			detectorFindNakedNotify=FindNakedNotify|true
			detectorFindUninitializedGet=FindUninitializedGet|true
			detectorFindUseOfNonSerializableValue=FindUseOfNonSerializableValue|true
			detectorFindJSR166LockMonitorenter=FindJSR166LockMonitorenter|true
			detectorQuestionableBooleanAssignment=QuestionableBooleanAssignment|true
			detectorSwitchFallthrough=SwitchFallthrough|true
			detectorFindLocalSelfAssignment2=FindLocalSelfAssignment2|true
			detectorConfusedInheritance=ConfusedInheritance|true
			detectorSynchronizationOnSharedBuiltinConstant=SynchronizationOnSharedBuiltinConstant|true
			detectorMutableStaticFields=MutableStaticFields|true
			detectorInvalidJUnitTest=InvalidJUnitTest|true
			detectorInfiniteLoop=InfiniteLoop|true
			detectorFindRunInvocations=FindRunInvocations|true
			detectorBadSyntaxForRegularExpression=BadSyntaxForRegularExpression|true
			detectorXMLFactoryBypass=XMLFactoryBypass|true
			detectorFindOpenStream=FindOpenStream|true
			detectorCheckExpectedWarnings=CheckExpectedWarnings|false
			detectorHugeSharedStringConstants=HugeSharedStringConstants|true
			detectorLostLoggerDueToWeakReference=LostLoggerDueToWeakReference|true
			detectorStringConcatenation=StringConcatenation|true
			detectorLoadOfKnownNullValue=LoadOfKnownNullValue|true
			detectorFinalizerNullsFields=FinalizerNullsFields|true
			detectorFindFieldSelfAssignment=FindFieldSelfAssignment|true
			detectorInefficientToArray=InefficientToArray|false
			detectorDontCatchIllegalMonitorStateException=DontCatchIllegalMonitorStateException|true
			detectorInconsistentAnnotations=InconsistentAnnotations|true
			detectorBadlyOverriddenAdapter=BadlyOverriddenAdapter|true
			detectorInstantiateStaticClass=InstantiateStaticClass|true
			detectorCheckRelaxingNullnessAnnotation=CheckRelaxingNullnessAnnotation|true
			detectorMethodReturnCheck=MethodReturnCheck|true
			detectorEqualsOperandShouldHaveClassCompatibleWithThis=EqualsOperandShouldHaveClassCompatibleWithThis|true
			detectorFindDoubleCheck=FindDoubleCheck|true
			detectorFindBadForLoop=FindBadForLoop|true
			detectorDefaultEncodingDetector=DefaultEncodingDetector|true
			detectorFindInconsistentSync2=FindInconsistentSync2|true
			detectorFindSpinLoop=FindSpinLoop|true
			detectorFindMaskedFields=FindMaskedFields|true
			detectorBooleanReturnNull=BooleanReturnNull|true
			detectorFindUnsyncGet=FindUnsyncGet|true
			detectorCrossSiteScripting=CrossSiteScripting|true
			detectorDroppedException=DroppedException|true
			detectorFindDeadLocalStores=FindDeadLocalStores|true
			detectorCheckImmutableAnnotation=CheckImmutableAnnotation|true
			detectorInfiniteRecursiveLoop=InfiniteRecursiveLoop|true
			detectorFindRefComparison=FindRefComparison|true
			detectorFindRoughConstants=FindRoughConstants|true
			detectorMutableLock=MutableLock|true
			detectorFindNullDeref=FindNullDeref|true
			detectorFindReturnRef=FindReturnRef|true
			detectorSynchronizeOnClassLiteralNotGetClass=SynchronizeOnClassLiteralNotGetClass|true
			detectorFindUselessControlFlow=FindUselessControlFlow|true
			detectorOverridingEqualsNotSymmetrical=OverridingEqualsNotSymmetrical|true
			detectorIDivResultCastToDouble=IDivResultCastToDouble|true
			detectorReadOfInstanceFieldInMethodInvokedByConstructorInSuperclass=ReadOfInstanceFieldInMethodInvokedByConstructorInSuperclass|true
			detectorFindSelfComparison=FindSelfComparison|true
			detectorFindFloatEquality=FindFloatEquality|true
			detectorFindComparatorProblems=FindComparatorProblems|true
			detectorRepeatedConditionals=RepeatedConditionals|true
			filter_settings_neg=NOISE|
			detectorInefficientMemberAccess=InefficientMemberAccess|false
			detectorFindUncalledPrivateMethods=FindUncalledPrivateMethods|true
			detectorNumberConstructor=NumberConstructor|true
			detectorDontAssertInstanceofInTests=DontAssertInstanceofInTests|true
			detectorFindFinalizeInvocations=FindFinalizeInvocations|true
			detectorFindNullDerefsInvolvingNonShortCircuitEvaluation=FindNullDerefsInvolvingNonShortCircuitEvaluation|true
			detectorDontIgnoreResultOfPutIfAbsent=DontIgnoreResultOfPutIfAbsent|true
			detectorFindUnconditionalWait=FindUnconditionalWait|true
			detectorFindTwoLockWait=FindTwoLockWait|true
			detectorFindSleepWithLockHeld=FindSleepWithLockHeld|true
			detectorFindUnreleasedLock=FindUnreleasedLock|true
			detectorInefficientIndexOf=InefficientIndexOf|false
			detectorDoInsideDoPrivileged=DoInsideDoPrivileged|true
			detectorFindEmptySynchronizedBlock=FindEmptySynchronizedBlock|true
			detectorOverridingMethodsMustInvokeSuperDetector=OverridingMethodsMustInvokeSuperDetector|true
			detectorWaitInLoop=WaitInLoop|true
			detectorIntCast2LongAsInstant=IntCast2LongAsInstant|true
			detectorBadUseOfReturnValue=BadUseOfReturnValue|true
			detectorFindSqlInjection=FindSqlInjection|true
			detectorUnreadFields=UnreadFields|true
			detectorSynchronizingOnContentsOfFieldToProtectField=SynchronizingOnContentsOfFieldToProtectField|true
			detectorFindUselessObjects=FindUselessObjects|true
			detectorBadAppletConstructor=BadAppletConstructor|false
			excludebugs0=$spotbugsBaselineFile|true
			detectorInheritanceUnsafeGetResource=InheritanceUnsafeGetResource|true
			detectorSerializableIdiom=SerializableIdiom|true
			detectorNaming=Naming|true
			detectorNoteUnconditionalParamDerefs=NoteUnconditionalParamDerefs|true
			detectorFormatStringChecker=FormatStringChecker|true
			detectorSuspiciousThreadInterrupted=SuspiciousThreadInterrupted|true
			detectorEmptyZipFileEntry=EmptyZipFileEntry|false
			detectorFindCircularDependencies=FindCircularDependencies|false
			detectorPreferZeroLengthArrays=PreferZeroLengthArrays|true
			detectorAtomicityProblem=AtomicityProblem|true
			detectorRuntimeExceptionCapture=RuntimeExceptionCapture|true
			detectorInitializationChain=InitializationChain|true
			detectorInitializeNonnullFieldsInConstructor=InitializeNonnullFieldsInConstructor|true
			detectorOptionalReturnNull=OptionalReturnNull|true
			detectorStartInConstructor=StartInConstructor|true
			detectorFindUnsatisfiedObligation=FindUnsatisfiedObligation|true
			detectorRedundantConditions=RedundantConditions|true
			effort=$spotbugsEffort
			detectorRedundantInterfaces=RedundantInterfaces|true
			detectorDuplicateBranches=DuplicateBranches|true
			detectorCheckTypeQualifiers=CheckTypeQualifiers|true
			detectorComparatorIdiom=ComparatorIdiom|true
			detectorFindBadCast2=FindBadCast2|true
			detectorFindMismatchedWaitOrNotify=FindMismatchedWaitOrNotify|true
			detectorBadResultSetAccess=BadResultSetAccess|true
			detectorIncompatMask=IncompatMask|true
			detectorCovariantArrayAssignment=CovariantArrayAssignment|false
			detectorDumbMethodInvocations=DumbMethodInvocations|true
			run_at_full_build=false
			detectorStaticCalendarDetector=StaticCalendarDetector|true
			detectorUncallableMethodOfAnonymousClass=UncallableMethodOfAnonymousClass|true
			detectorVarArgsProblems=VarArgsProblems|true
			detectorInefficientInitializationInsideLoop=InefficientInitializationInsideLoop|false
			detectorCloneIdiom=CloneIdiom|true
			detectorFindHEmismatch=FindHEmismatch|true
			detectorAppendingToAnObjectOutputStream=AppendingToAnObjectOutputStream|true
			detectorFindSelfComparison2=FindSelfComparison2|true
			detectorLazyInit=LazyInit|true
			detectorFindUnrelatedTypesInGenericContainer=FindUnrelatedTypesInGenericContainer|true
			detectorDontUseEnum=DontUseEnum|true
			detectorFindPuzzlers=FindPuzzlers|true
			detectorCallToUnsupportedMethod=CallToUnsupportedMethod|false
			detectorSuperfluousInstanceOf=SuperfluousInstanceOf|true
			detectorReadReturnShouldBeChecked=ReadReturnShouldBeChecked|true
			detector_threshold=3
			detectorPublicSemaphores=PublicSemaphores|false
			detectorDumbMethods=DumbMethods|true
			""".stripIndent())
	}
}

compileJava {
	dependsOn generateModuleInfo, generateVersion, copyGameControllerDB
	source generateVersion.outputs.files, sourceSets.main.java
	options.compilerArgs += ['-Xlint:deprecation']
}

run {
	if (os.linux)
		jvmArgs = linuxJvmArgs
}

task jlink(type: Exec) {
	description = 'Executes the jlink command to create a customized minimal Java runtime inside the build directory. Also removes any preexisting runtime in the same directory.'
	group
	doFirst { delete runtimeDir }
	commandLine 'jlink', '--output', runtimeDir, '--strip-debug', '--no-header-files', '--no-man-pages', '--strip-native-commands', '--add-modules', 'java.desktop,java.management,jdk.unsupported,java.logging,jdk.xml.dom'
}

task copyLibs(type: Copy) {
	description = 'Copies all jar files into a directory called \'libs\' inside the build directory.'
	dependsOn jar
	from configurations.runtimeClasspath
	into libsDir
}

task customizeLoggingProperties {
	description = 'Alters the default "logging.properties" configuration file of the Java runtime to include a FileHandler that logs to a logfile in the system\'s TEMP directory using SimpleFormatter with custom formatting.'
	dependsOn jlink
	doLast {
		ant.propertyfile(file: "$runtimeDir/conf/logging.properties") {
			entry(key: 'handlers', value: 'java.util.logging.FileHandler, java.util.logging.ConsoleHandler')
			entry(key: 'java.util.logging.FileHandler.pattern', value: "%t/${project.name}.log")
			entry(key: 'java.util.logging.FileHandler.formatter', value: 'java.util.logging.SimpleFormatter')
			entry(key: 'java.util.logging.SimpleFormatter.format', value: '[%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS:%1$tL] %3$s: %5$s%6$s%n')
		}
	}
}

task jpackage(type: Exec) {
	description = 'Executes the jpackage command to create a standalone application image packaged with a custom minimal Java runtime.'
	dependsOn copyLibs, customizeLoggingProperties
	doFirst { delete "$tmpDir/$project.name" }
	def commandLineParts = [
		'jpackage',
		'--dest',
		tmpDir,
		'--type',
		'app-image',
		'--name',
		project.name,
		'--runtime-image',
		runtimeDir,
		'--module-path',
		libsDir,
		'--module',
		"${project.application.mainModule.get()}/$project.application.mainClassName",
		'--app-version',
		versionWithoutHash,
		'--icon',
		"$projectDir/icon.${os.windows ? 'ico' : 'png'}",
		'--copyright',
		"Copyright ${new Date().format('yyyy')} Matteo Hausner",
		'--vendor',
		'Matteo Hausner',
		'--verbose'
	]
	if (os.linux)
		linuxJvmArgs.each { commandLineParts.addAll(['--java-options', it]) }
	commandLine commandLineParts
}

startScripts.enabled = false

task distTar(type: Tar, overwrite: true) {
	dependsOn jpackage
	from tmpDir
	include "$project.name/**"
	appendix distAppendix
	compression Compression.GZIP
}

task distZip(type: Zip, overwrite: true) {
	dependsOn jpackage
	from tmpDir
	include "$project.name/**"
	appendix distAppendix
}

task installDist(type: Sync, overwrite: true) {
	dependsOn jpackage
	from tmpDir
	into "$buildDir/install"
	include "$project.name/**"
}
